name: Generation

on:
  schedule:
    - cron: "0 6 * * *"
  push:
    branches:
      - master
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true
  VERBOSE: true

jobs:
  Windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Clone submodules
        run: |
          git submodule update --init
          cd cimgui
          git checkout docking_inter
          git submodule update --init
      - name: Prepare cimgui
        run: |
          Copy-item -Force -Recurse -Verbose ".\cimgui-deps\*" -Destination ".\cimgui\"
          ((Get-Content .\cimgui\cimgui.cpp -Raw) -replace "#include `"cimgui.h`"","#define CIMGUI_NO_EXPORT`n#include `"cimgui.h`"`n#include <generator/output/cimgui_impl.h>") | Set-Content .\cimgui\cimgui.cpp
      - name: Build cimgui
        run: |
          cd .\cimgui\
          cmake .
          cmake --build . --target ALL_BUILD --config Debug -- /nologo /maxcpucount
          cmake --build . --target ALL_BUILD --config Release -- /nologo /maxcpucount
      - name: Copy binaries to dist
        run: |
          New-Item -ItemType Directory -Force -Path ".\ImGui\dist\Debug-Win64\"
          New-Item -ItemType Directory -Force -Path ".\ImGui\dist\Release-Win64\"
          Copy-item -Force -Verbose ".\cimgui\Debug\cimgui.lib" -Destination ".\ImGui\dist\Debug-Win64\"
          Copy-item -Force -Verbose ".\cimgui\Release\cimgui.lib" -Destination ".\ImGui\dist\Release-Win64\"
      - name: Commit and push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout -b Windows-Build    
          git add ImGui/dist/*              
          git commit -m "Generation"
          git push origin Windows-Build

  Linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libglfw3-dev libsdl2-dev gcc-multilib g++-multilib libfreetype6-dev
      - name: Clone submodules
        run: |
          git submodule update --init
          cd cimgui
          git checkout docking_inter
          git submodule update --init
      - name: Prepare cimgui
        run: |
          sed -i "s/#include \"cimgui.h\"/#define CIMGUI_NO_EXPORT\n#include \"cimgui.h\"\n#include \"generator\/output\/cimgui_impl.h\"/g" cimgui/cimgui.cpp
      - name: Prepare branch
        continue-on-error: true
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout -b Linux-Build
          rm -rf "./ImGui/dist/Debug-Linux64"
          rm -rf "./ImGui/dist/Release-Linux64"
          mkdir -p "./ImGui/dist/Debug-Linux64"
          mkdir -p "./ImGui/dist/Release-Linux64"
          git add ImGui/dist/*
          git commit -m "preparation"        
          git push origin Linux-Build
      - name: Build cimgui
        run: |
          cd ./cimgui/
          cmake .
          cmake -DIMGUI_STATIC=yes
          cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON
          cmake --build . --config Debug
          cp -rf "./cimgui.a" "../ImGui/dist/Debug-Linux64/cimgui.a"
          cmake --build . --config Release
          cp -rf "./cimgui.a" "../ImGui/dist/Release-Linux64/cimgui.a"
      - name: Commit and push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout Linux-Build
          git add ImGui/dist/*
          git commit -m "Generation"        
          git push origin Linux-Build

  macOS:
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Dependencies
        run: |
          brew install glfw3
          brew install sdl2
      - name: Clone submodules
        run: |
          git submodule update --init
          cd cimgui
          git checkout docking_inter
          git submodule update --init
      - name: Prepare cimgui
        run: |
          perl -i -pe"s/#include \"cimgui.h\"/#define CIMGUI_NO_EXPORT\n#include \"cimgui.h\"\n#include \"generator\/output\/cimgui_impl.h\"/g" cimgui/cimgui.cpp
      - name: Build cimgui
        run: |
          rm -rf "./ImGui/dist/Debug-macOS"
          rm -rf "./ImGui/dist/Release-macOS"
          mkdir -p "./ImGui/dist/Debug-macOS"
          mkdir -p "./ImGui/dist/Release-macOS"
          cd ./cimgui/
          cmake .
          cmake -DIMGUI_STATIC=yes
          cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON
          cmake -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.9
          cmake --build . --config Debug
          cp -rf "./cimgui.a" "../ImGui/dist/Debug-macOS/cimgui.a"
          cmake --build . --config Release
          cp -rf "./cimgui.a" "../ImGui/dist/Release-macOS/cimgui.a"
      - name: Commit and push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout -b macOS-Build
          git add ImGui/dist/*
          git commit -m "Generation"
          git push origin macOS-Build
  Merge:
    runs-on: ubuntu-latest
    needs: [Windows, Linux, macOS]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Login
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: Merge builds
        run: |
          git fetch
          git submodule update --init --recursive
          git checkout -b Build
          git merge origin/Windows-Build
          git merge origin/Linux-Build
          git merge origin/macOS-Build
      - name: Get latest cimgui binding info
        run: |
          git submodule update --init
          cd cimgui
          git checkout docking_inter
      - name: Generate ImGui bindings
        run: |
          git checkout -b Bindings
          cd ./Generator/
          dotnet run
          git add ..
          git commit -m "Generate Bindings"
      - name: Push generated files
        run: |
          git checkout Build
          git merge Bindings
          git checkout master
          git merge --squash Build
          git commit -m "Generation"
          git push origin master

  Cleanup:
    runs-on: ubuntu-latest
    needs: [Merge]
    if: always()
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: cleanup branches
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git fetch
          git push origin -d Windows-Build          
          git push origin -d Linux-Build
          git push origin -d macOS-Build
